{-| Interface to the @umount@ cmdline utility.  It probably requires rootness,
    but not always; so that's not checked.  However, that's not a guaranteed
    requirement, so this interface does not check or enforce that.
 -}
module MockIO.Cmds.UtilLinux.Umount
  ( umount, umounts )
where

import Base1T

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir )
import FPath.Error.FPathError  ( AsFPathError )

-- lens --------------------------------

import Control.Lens.Getter  ( view )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity )

-- mockio ------------------------------

import MockIO.DoMock  ( HasDoMock( doMock ) )

-- mockio-log --------------------------

import MockIO.Log          ( logio )
import MockIO.MockIOClass  ( MockIOClass )

-- mockio-plus -------------------------

import MockIO.Process  ( Íô© )

-- monadio-plus ------------------------

import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )

-- mtl ---------------------------------

import Control.Monad.Reader  ( MonadReader, asks )

-- safe --------------------------------

import Safe  ( succSafe )

-- stdmain -----------------------------

import StdMain.ProcOutputParseError ( AsProcOutputParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified MockIO.Cmds.UtilLinux.Paths  as  Paths

--------------------------------------------------------------------------------

{-| Possible ways to request an unmount -}
class ToUmountArgs Œ± where
  toUmountArgs ‚à∑ Œ± ‚Üí [ùïã]
  {-| Write a msg to the log that we're about to unmount -}
  unmountMsg ‚à∑ Œ± ‚Üí ùïã

{-| Unmount a partition by mount target directory -}
instance ToUmountArgs AbsDir where
  toUmountArgs d = [toText d]
  unmountMsg d = [fmtT|unmounting %T|] d

{-| Unmount a partition. -}
umount ‚à∑ ‚àÄ Œµ Œ± œÅ Œº .
         (MonadIO Œº, ToUmountArgs Œ±, HasDoMock œÅ, MonadReader œÅ Œº,
          AsProcOutputParseError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
          AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,HasCallStack,
          MonadLog (Log MockIOClass) Œº) ‚áí
         Severity ‚Üí Œ± ‚Üí Œº ()
umount sev args = snd ‚ä≥ Íô© (Paths.umount,toUmountArgs args,sev)

{-| Unmounts several partitions, emitting a log message at the given severity
    for each. -}
umounts ‚à∑ ‚àÄ Œµ ŒΩ œà œÅ Œº .
          (MonadIO Œº, Traversable œà, ToUmountArgs ŒΩ,
           HasDoMock œÅ, MonadReader œÅ Œº, MonadLog (Log MockIOClass) Œº,
           AsProcOutputParseError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
           AsFPathError Œµ, AsIOError Œµ,Printable Œµ,MonadError Œµ Œº,HasCallStack)‚áí
          Severity ‚Üí œà ŒΩ ‚Üí Œº ()
umounts sev argss = do
  do_mock ‚Üê asks (view doMock)
  forM_ argss $ \ d ‚Üí do
    logio sev (unmountMsg d) do_mock
    umount (succSafe sev) d

-- that's all, folks! ----------------------------------------------------------

{-| Interface to the @mount@ cmdline utility.  It probably requires rootness,
    but not always; so that's not checked.  However, that's not a guaranteed
    requirement, so this interface does not check or enforce that.
 -}
module MockIO.Cmds.UtilLinux.Mount
  ( mount, mounts )
where

import Base1T

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir )
import FPath.AbsFile           ( AbsFile )
import FPath.Error.FPathError  ( AsFPathError )

-- lens --------------------------------

import Control.Lens.Getter  ( view )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity )

-- mockio ------------------------------

import MockIO.DoMock  ( HasDoMock( doMock ) )

-- mockio-log --------------------------

import MockIO.Log          ( logio )
import MockIO.MockIOClass  ( MockIOClass )

-- mockio-plus -------------------------

import MockIO.Process  ( Íô© )

-- monadio-plus ------------------------

import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )

-- mtl ---------------------------------

import Control.Monad.Reader  ( MonadReader, asks )

-- safe --------------------------------

import Safe  ( succSafe )

-- stdmain -----------------------------

import StdMain.ProcOutputParseError ( AsProcOutputParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified MockIO.Cmds.UtilLinux.Paths  as  Paths

--------------------------------------------------------------------------------

{-| Possible ways to request a mount -}
class ToMountArgs Œ± where
  {-| Convert to arguments to @mount@ -}
  toMountArgs ‚à∑ Œ± ‚Üí [ùïã]
  {-| Write a msg to the log that we're about to mount -}
  mountMsg ‚à∑ Œ± ‚Üí ùïã

{-| Mount a partition by file (e.g., a device file) and mount target
    directory. -}
instance ToMountArgs (AbsFile, AbsDir) where
  toMountArgs (f,d) = [toText f, toText d]
  mountMsg (f,d) = [fmtT|mounting %T at %T|] f d

{-| Mount a partition. -}
mount ‚à∑ ‚àÄ Œµ Œ± œÅ Œº .
        (MonadIO Œº, ToMountArgs Œ±, HasDoMock œÅ, MonadReader œÅ Œº,
         AsProcOutputParseError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
         AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº, HasCallStack,
         MonadLog (Log MockIOClass) Œº) ‚áí
        Severity ‚Üí Œ± ‚Üí Œº ()
mount sev args = snd ‚ä≥ Íô© (Paths.mount, toMountArgs args, sev)

{-| Mounts several partitions, emitting a log message at the given severity
    for each. -}
mounts ‚à∑ ‚àÄ Œµ Œ∫ ŒΩ œà œÅ Œº .
         (MonadIO Œº, Traversable œà, ToMountArgs (Œ∫,ŒΩ), Printable Œ∫, Printable ŒΩ,
          HasDoMock œÅ, MonadReader œÅ Œº,
          AsProcOutputParseError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
          AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº, HasCallStack,
          MonadLog (Log MockIOClass) Œº) ‚áí
         Severity ‚Üí œà (Œ∫,ŒΩ) ‚Üí Œº ()
mounts sev argss = do
  do_mock ‚Üê asks (view doMock)
  forM_ argss $ \ m ‚Üí logio sev (mountMsg m) do_mock ‚™º mount (succSafe sev) m

-- that's all, folks! ----------------------------------------------------------
